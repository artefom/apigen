/// API auto-generated by apigen
use std::collections::HashMap;
use std::fmt::Display;

use serde::{Deserialize, Serialize};

use actix_web::{
    get, http::StatusCode, middleware::NormalizePath, web, App, HttpRequest, HttpResponse,
    HttpServer, ResponseError,
};

use async_trait::async_trait;


// Models
// -------------------------------

{% for model in models %}
{{ model }}
{% endfor %}

// Errors
// -------------------------------

{% for error in errors %}
{{ error }}
{% endfor %}

// Api service
// -------------------------------

#[async_trait(?Send)]
pub trait ApiService<S>
where
    S: Send + Sync + 'static,
{
    {% for method in methods %}

    {% if method.doc %}
    {% for line in method.doc.splitlines() %}
    /// {{line}}
    {% endfor %}
    {% endif %}
    {% if method.error_type %}
    async fn {{method.operation_id}}(
        data: web::Data<S>,
        {% for parameter in method.parameters %}
        {{parameter.name}}: {{parameter.type}}, 
        {% endfor %}
    ) -> Result<{{method.response_type}}, {{method.error_type}}>;
    {% else %}
    async fn {{method.operation_id}}(
        data: web::Data<S>,
    ) -> {{method.response_type}};
    {% endif %}
    {% endfor %}
}


static OPENAPI_FILE: &'static str = include_str!("static/openapi.yaml");
static DOCS_PAGE: &'static str = include_str!("static/docs.html");

/// Documentation
#[get("/openapi.yaml")]
async fn openapi() -> String {
    OPENAPI_FILE.to_string()
}

/// Documentation
#[get("/docs")]
async fn docs() -> HttpResponse {
    HttpResponse::build(StatusCode::OK)
        .content_type("text/html; charset=utf-8")
        .body(DOCS_PAGE)
}

#[get("/")]
async fn redirect_to_docs() -> HttpResponse {
    HttpResponse::build(StatusCode::PERMANENT_REDIRECT)
        .append_header(("Location", "/docs"))
        .body("")
}


pub async fn run_service<T, S>(bind: &str, initial_state: S) -> Result<(), std::io::Error>
where
    T: ApiService<S> + 'static,
    S: Send + Sync + 'static,
{
    let app_data = web::Data::new(initial_state);

    HttpServer::new(move || {
        App::new()
            .app_data(app_data.clone())
            .wrap(NormalizePath::trim())
            .service(openapi)
            .service(redirect_to_docs)
            .service(docs)
            {% for method in methods %}
            .route("{{method.path}}", web::{{method.method}}().to(T::{{method.operation_id}}))
            {% endfor %}
    })
    .bind(bind)?
    .run()
    .await?;

    Ok(())
}
